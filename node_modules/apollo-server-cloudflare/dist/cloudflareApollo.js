"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphqlCloudflare = void 0;
const apollo_server_core_1 = require("apollo-server-core");
const apollo_server_env_1 = require("apollo-server-env");
function graphqlCloudflare(options, csrfPreventionRequestHeaders) {
    if (!options) {
        throw new Error('Apollo Server requires options.');
    }
    const graphqlHandler = async (req) => {
        const url = new apollo_server_env_1.URL(req.url);
        const query = req.method === 'POST'
            ? await req.json()
            : {
                query: url.searchParams.get('query'),
                variables: url.searchParams.get('variables'),
                operationName: url.searchParams.get('operationName'),
                extensions: url.searchParams.get('extensions'),
            };
        return (0, apollo_server_core_1.runHttpQuery)([req], {
            method: req.method,
            options: options,
            query,
            request: req,
        }, csrfPreventionRequestHeaders).then(({ graphqlResponse, responseInit }) => new apollo_server_env_1.Response(graphqlResponse, responseInit), (error) => {
            if ('HttpQueryError' !== error.name)
                throw error;
            const res = new apollo_server_env_1.Response(error.message, {
                status: error.statusCode,
                headers: error.headers,
            });
            return res;
        });
    };
    return graphqlHandler;
}
exports.graphqlCloudflare = graphqlCloudflare;
//# sourceMappingURL=cloudflareApollo.js.map